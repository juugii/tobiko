# Jules GILET <jules.gilet@curie.fr>

# part of the single cell custom pipeline for for TCR repertoire analysis in 10x datasets
# add the TCR clones information to the expression matrix produced by ikura

args <- commandArgs(TRUE)

if(length(args)!=3){
	stop("Error: the postprocess script requires 3 arguments (<cloneTableLoc> <ikuraOutdir> <mikusaOutdir>).", call.=FALSE)
} else if(length(args)==3){

	cloneFile <- args[1]
	ikuraPath <- args[2]
	exportPath <- args[3]

}

# libraries
suppressWarnings(suppressMessages(library(reshape2)))
suppressWarnings(suppressMessages(library(ggplot2)))
suppressWarnings(suppressMessages(library(Matrix)))

# functions
readIkura <- function(path){

	require(Matrix)

	message("reading data...")
	mat <- readMM(paste0(path, '/matrix.mtx'))
	genes <- read.delim(paste0(path, '/genes.tsv'), sep="\t", header=FALSE, stringsAsFactors=FALSE)$V2
	cells <- read.delim(paste0(path, '/barcodes.tsv'), sep="\t", header=FALSE, stringsAsFactors=FALSE)$V1

	colnames(mat) <- cells
	rownames(mat) <- genes

	return(mat)

}


# will work only if more than two clones
# ie if nrow(mat)>1
concatMat <- function(short, full){

	short <- short[ ,colnames(short) %in% colnames(full) ]

	if (nrow(short)>1) {

		#this part has to be checked

		message("concatenating matrix...")
		a <- data.frame(barcode=as.character(colnames(full)), row.names=as.character(colnames(full)))
		b <- as.data.frame(cbind(t(short), barcode=colnames(short)))
	
		c <- merge(a, b, by='barcode', all=TRUE)
		rownames(c) <- c$barcode
		c <- c[,-1]
		c[is.na(c)] <- 0

		mat <- Matrix(rbind(as.matrix(full), t(c)), sparse=TRUE)

		return(mat)

	} else {

		#is working

		message("concatenating matrix...")
		a <- data.frame(barcode=as.character(colnames(full)), row.names=as.character(colnames(full)))
		b <- as.data.frame(cbind(t(short), barcode=colnames(short)))
	
		c <- merge(a, b, by='barcode', all=TRUE)
		rownames(c) <- c$barcode
		c <- as.data.frame(as.integer(c[,-1]))
		colnames(c) <- colnames(b)[1]
		c[is.na(c)] <- 0

		mat <- Matrix(rbind(as.matrix(full), t(c)), sparse=TRUE)

		return(mat)
	
	}
	
}


exportMat <- function(mat, path){

	require(Matrix)

        cells <- colnames(mat)
        genes <- rownames(mat)

        message("exporting matrix...")
        write.table(x=data.frame(cell=cells), file=paste0(path,"/barcodes.tsv"), row.names=FALSE, col.names=FALSE, quote=FALSE, sep="\t")
        write.table(x=data.frame(gene=genes, gene=genes), file=paste0(path,"/genes.tsv"), row.names=FALSE, col.names=FALSE, quote=FALSE, sep="\t")
        writeMM(mat, file=paste0(path,"/matrix.mtx"))

	return("Done.")

}


assembleFullTCRperCell <- function(tcrmat){

        cellsWithFullTcr <- tcrmat[,colSums(tcrmat>0)==2]
        nbCells <- dim(cellsWithFullTcr)[2]

        tcr_table <- data.frame(cell=character(nbCells), TCR=character(nbCells), stringsAsFactors=FALSE)

        for (cells in 1:nbCells){
                vec <- rownames(cellsWithFullTcr[cellsWithFullTcr[,cells]>0,])
                if((grepl("^TRA", vec[1]) & grepl("^TRB", vec[2])) | (grepl("^TRA", vec[2]) & grepl("^TRB", vec[1]))){
                        tcr_table[cells,1] <- colnames(cellsWithFullTcr)[cells]
                        tcr_table[cells,2] <- paste(vec[grepl("^TRA", vec)], vec[grepl("^TRB", vec)], sep="_")
                } else {
                        tcr_table[cells,1] <- colnames(cellsWithFullTcr)[cells]
                        tcr_table[cells,2] <- "inconsistant_fullTCRAB"
                }
        }

        return(tcr_table)

}


sparseRbind <- function(full, short){

	require(Matrix)
	short <- short[ ,colnames(short) %in% colnames(full) ]

	message("concatenating matrix...")
	res <- Matrix(0, nrow=(NROW(full) + NROW(short)), ncol=length(colnames(full)), dimnames=list(c(rownames(full), rownames(short)), colnames(full)))
	res[rownames(full), colnames(full)] <- full
	res[rownames(short), colnames(short)] <- short

	return(res)

}


# exec
clones <- read.delim(cloneFile, header=FALSE, sep=" ")

# frequency graph
freq <- data.frame(table(clones$V2))
freq <- freq[order(freq$Freq, decreasing=TRUE),]
freq$Var1 <- factor(freq$Var1, levels=freq$Var1)

pdf(paste0(exportPath, "/TCR_frequencies.pdf"), height=14)
	ggplot(freq, aes(x=Var1, y=Freq)) + geom_histogram(stat='identity') + theme(axis.text.x = element_text(angle=90, hjust=1)) + labs(y="number of clones detected", title="frequency of all TCR chains detected")
	ggplot(freq[grepl("^TRA", freq[,1]),], aes(x=Var1, y=Freq)) + geom_histogram(stat='identity') + theme_bw() + theme(axis.text.x = element_text(angle=90, hjust=1)) + labs(y="number of clones detected", title="TCR alpha chains")
	ggplot(freq[grepl("^TRB", freq[,1]),], aes(x=Var1, y=Freq)) + geom_histogram(stat='identity') + theme_bw() + theme(axis.text.x = element_text(angle=90, hjust=1)) + labs(y="number of clones detected", title="TCR beta chains")
dev.off()

pdf(paste0(exportPath, "/TCR_Topfrequencies.pdf"), height=10)
        ggplot(freq[grepl("^TRA", freq[,1]),][1:5,], aes(x=Var1, y=Freq)) + geom_histogram(stat='identity') + theme_bw() + theme(axis.text.x = element_text(angle=90, hjust=1)) + labs(y="number of clones detected", title="top5 TCR alpha chains")
	ggplot(freq[grepl("^TRB", freq[,1]),][1:5,], aes(x=Var1, y=Freq)) + geom_histogram(stat='identity') + theme_bw() + theme(axis.text.x = element_text(angle=90, hjust=1)) + labs(y="number of clones detected", title="top5 TCR beta chains")
dev.off()

# adding TCR to the matrix
suppressMessages(short <- dcast(clones, V2~V1))
rownames(short) <- short[,1]
short <- short[,-1]

# reassemble and export cells with complete alpha and beta TCR chains
if(max(colSums(short>0))>1){

	tcr_table <- assembleFullTCRperCell(short)
	write.csv(tcr_table, file=paste0(exportPath, "/fullTCRtablePerCell.csv"), row.names=FALSE)

} else {

	warning("Impossible to find ny cell with both alpha and beta chains detected. Skipping...")

}

short <- Matrix(as.matrix(short))
full <- readIkura(ikuraPath)

# newMat <- concatMat(short, full)
newMat <- sparseRbind(full, short)

exportMat(newMat, exportPath)

q(save='no')
